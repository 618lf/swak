! function ($) {
    Function.prototype.ligerExtend = function (e, t) {
        if ("function" != typeof e) return this;
        this.base = e.prototype;
        this.base.constructor = e;
        var i = function () {};
        i.prototype = e.prototype;
        this.prototype = new i;
        this.prototype.constructor = this;
        t && $.extend(this.prototype, t)
    };
    Function.prototype.ligerDefer = function (e, t, i) {
        var r = this;
        return setTimeout(function () {
            r.apply(e, i || [])
        }, t)
    };
    window.liger = $.ligerui = {
        version: "V1.2.0",
        managerCount: 0,
        managers: {},
        managerIdPrev: "ligerui",
        autoNewId: !0,
        error: {
            managerIsExist: "管理器id已经存在"
        },
        pluginPrev: "liger",
        getId: function (e) {
            e = e || this.managerIdPrev;
            var t = e + (1e3 + this.managerCount);
            this.managerCount++;
            return t
        },
        add: function (e) {
            if (2 != arguments.length) {
                e.id || (e.id = this.getId(e.__idPrev()));
                this.managers[e.id] && (e.id = this.getId(e.__idPrev()));
                if (this.managers[e.id]) throw new Error(this.error.managerIsExist);
                this.managers[e.id] = e
            } else {
                var t = arguments[1];
                t.id = t.id || t.options.id || arguments[0].id;
                this.addManager(t)
            }
        },
        remove: function (e) {
            if ("string" == typeof e || "number" == typeof e) delete liger.managers[e];
            else if ("object" == typeof e)
                if (e instanceof liger.core.Component) delete liger.managers[e.id];
                else {
                    if (!$(e).attr(this.idAttrName)) return !1;
                    delete liger.managers[$(e).attr(this.idAttrName)]
                }
        },
        get: function (e, t) {
            t = t || "ligeruiid";
            if ("string" == typeof e || "number" == typeof e) return liger.managers[e];
            if ("object" == typeof e) {
                var i = e.length ? e[0] : e,
                    r = i[t] || $(i).attr(t);
                return r ? liger.managers[r] : null
            }
            return null
        },
        find: function (e) {
            var t = [];
            for (var i in this.managers) {
                var r = this.managers[i];
                e instanceof Function ? r instanceof e && t.push(r) : e instanceof Array ? -1 != $.inArray(r.__getType(), e) && t.push(r) : r.__getType() == e && t.push(r)
            }
            return t
        },
        run: function (e, t, i) {
            if (e) {
                i = $.extend({
                    defaultsNamespace: "ligerDefaults",
                    methodsNamespace: "ligerMethods",
                    controlNamespace: "controls",
                    idAttrName: "ligeruiid",
                    isStatic: !1,
                    hasElement: !0,
                    propertyToElemnt: null
                }, i || {});
                e = e.replace(/^ligerGet/, "");
                e = e.replace(/^liger/, "");
                if (null == this || this == window || i.isStatic) {
                    liger.plugins[e] || (liger.plugins[e] = {
                        fn: $[liger.pluginPrev + e],
                        isStatic: !0
                    });
                    return new $.ligerui[i.controlNamespace][e]($.extend({}, $[i.defaultsNamespace][e] || {}, $[i.defaultsNamespace][e + "String"] || {}, t.length > 0 ? t[0] : {}))
                }
                liger.plugins[e] || (liger.plugins[e] = {
                    fn: $.fn[liger.pluginPrev + e],
                    isStatic: !1
                });
                if (/Manager$/.test(e)) return liger.get(this, i.idAttrName);
                this.each(function () {
                    if (this[i.idAttrName] || $(this).attr(i.idAttrName)) {
                        var r = liger.get(this[i.idAttrName] || $(this).attr(i.idAttrName));
                        r && t.length > 0 && r.set(t[0])
                    } else if (!(t.length >= 1 && "string" == typeof t[0])) {
                        var s = t.length > 0 ? t[0] : null,
                            a = $.extend({}, $[i.defaultsNamespace][e], $[i.defaultsNamespace][e + "String"], s);
                        i.propertyToElemnt && (a[i.propertyToElemnt] = this);
                        i.hasElement ? new $.ligerui[i.controlNamespace][e](this, a) : new $.ligerui[i.controlNamespace][e](a)
                    }
                });
                if (0 == this.length) return null;
                if (0 == t.length) return liger.get(this, i.idAttrName);
                if ("object" == typeof t[0]) return liger.get(this, i.idAttrName);
                if ("string" == typeof t[0]) {
                    var r = liger.get(this, i.idAttrName);
                    if (null == r) return;
                    if ("option" != t[0]) {
                        var s = t[0];
                        if (!r[s]) return;
                        var a = Array.apply(null, t);
                        a.shift();
                        return r[s].apply(r, a)
                    }
                    if (2 == t.length) return r.get(t[1]);
                    if (t.length >= 3) return r.set(t[1], t[2])
                }
                return null
            }
        },
        defaults: {},
        methods: {},
        core: {},
        controls: {},
        plugins: {}
    };
    $.ligerDefaults = {};
    $.ligerMethos = {};
    liger.defaults = $.ligerDefaults;
    liger.methods = $.ligerMethos;
    $.fn.liger = function (e) {
        return e ? liger.run.call(this, e, arguments) : liger.get(this)
    };
    liger.core.Component = function (e) {
        this.events = this.events || {};
        this.options = e || {};
        this.children = {}
    };
    $.extend(liger.core.Component.prototype, {
        __getType: function () {
            return "liger.core.Component"
        },
        __idPrev: function () {
            return "ligerui"
        },
        set: function (e, t) {
            if (e)
                if ("object" != typeof e) {
                    var i = e;
                    if (0 != i.indexOf("on")) {
                        this.options || (this.options = {});
                        if (0 != this.trigger("propertychange", [e, t])) {
                            this.options[i] = t;
                            var r = "_set" + i.substr(0, 1).toUpperCase() + i.substr(1);
                            this[r] && this[r].call(this, t);
                            this.trigger("propertychanged", [e, t])
                        }
                    } else "function" == typeof t && this.bind(i.substr(2), t)
                } else {
                    var s;
                    if (this.options != e) {
                        $.extend(this.options, e);
                        s = e
                    } else s = $.extend({}, e); if (void 0 == t || 1 == t)
                        for (var a in s) 0 == a.indexOf("on") && this.set(a, s[a]);
                    if (void 0 == t || 0 == t)
                        for (var a in s) 0 != a.indexOf("on") && this.set(a, s[a])
                }
        },
        get: function (e) {
            var t = "_get" + e.substr(0, 1).toUpperCase() + e.substr(1);
            return this[t] ? this[t].call(this, e) : this.options[e]
        },
        hasBind: function (e) {
            var t = e.toLowerCase(),
                i = this.events[t];
            return i && i.length ? !0 : !1
        },
        trigger: function (e, t) {
            if (e) {
                var i = e.toLowerCase(),
                    r = this.events[i];
                if (r) {
                    t = t || [];
                    t instanceof Array == 0 && (t = [t]);
                    for (var s = 0; s < r.length; s++) {
                        var a = r[s];
                        if (0 == a.handler.apply(a.context, t)) return !1
                    }
                }
            }
        },
        bind: function (e, t, i) {
            if ("object" != typeof e) {
                if ("function" != typeof t) return !1;
                var r = e.toLowerCase(),
                    s = this.events[r] || [];
                i = i || this;
                s.push({
                    handler: t,
                    context: i
                });
                this.events[r] = s
            } else
                for (var a in e) this.bind(a, e[a])
        },
        unbind: function (e, t) {
            if (e) {
                var i = e.toLowerCase(),
                    r = this.events[i];
                if (r && r.length)
                    if (t) {
                        for (var s = 0, a = r.length; a > s; s++)
                            if (r[s].handler == t) {
                                r.splice(s, 1);
                                break
                            }
                    } else delete this.events[i]
            } else this.events = {}
        },
        destroy: function () {
            liger.remove(this)
        }
    });
    liger.core.UIComponent = function (e, t) {
        liger.core.UIComponent.base.constructor.call(this, t);
        var i = this._extendMethods();
        i && $.extend(this, i);
        this.element = e;
        this._init();
        this._preRender();
        this.trigger("render");
        this._render();
        this.trigger("rendered");
        this._rendered()
    };
    liger.core.UIComponent.ligerExtend(liger.core.Component, {
        __getType: function () {
            return "liger.core.UIComponent"
        },
        _extendMethods: function () {},
        _init: function () {
            this.type = this.__getType();
            this.id = this.element ? this.options.id || this.element.id || liger.getId(this.__idPrev()) : this.options.id || liger.getId(this.__idPrev());
            liger.add(this);
            if (this.element) {
                var attributes = this.attr();
                if (attributes && attributes instanceof Array)
                    for (var i = 0; i < attributes.length; i++) {
                        var name = attributes[i];
                        this.options[name] = $(this.element).attr(name)
                    }
                var p = this.options;
                if ($(this.element).attr("ligerui")) try {
                    var attroptions = $(this.element).attr("ligerui");
                    0 != attroptions.indexOf("{") && (attroptions = "{" + attroptions + "}");
                    eval("attroptions = " + attroptions + ";");
                    attroptions && $.extend(p, attroptions)
                } catch (e) {}
            }
        },
        _preRender: function () {},
        _render: function () {},
        _rendered: function () {
            this.element && $(this.element).attr("ligeruiid", this.id)
        },
        attr: function () {
            return []
        },
        destroy: function () {
            this.element && $(this.element).remove();
            this.options = null;
            liger.remove(this)
        }
    });
    liger.controls.Input = function (e, t) {
        liger.controls.Input.base.constructor.call(this, e, t)
    };
    liger.controls.Input.ligerExtend(liger.core.UIComponent, {
        __getType: function () {
            return "liger.controls.Input"
        },
        attr: function () {
            return ["nullText"]
        },
        setValue: function (e) {
            return this.set("value", e)
        },
        getValue: function () {
            return this.get("value")
        },
        _setReadonly: function (e) {
            var t = this.wrapper || this.text;
            if (t && t.hasClass("l-text")) {
                var i = this.inputText;
                if (e) {
                    i && i.attr("readonly", "readonly");
                    t.addClass("l-text-readonly")
                } else {
                    i && i.removeAttr("readonly");
                    t.removeClass("l-text-readonly")
                }
            }
        },
        setEnabled: function () {
            return this.set("disabled", !1)
        },
        setDisabled: function () {
            return this.set("disabled", !0)
        },
        updateStyle: function () {},
        resize: function (e, t) {
            this.set({
                width: e,
                height: t
            })
        }
    });
    liger.win = {
        top: !1,
        mask: function () {
            function e() {
                if (liger.win.windowMask) {
                    var e = $(window).height() + $(window).scrollTop();
                    liger.win.windowMask.height(e)
                }
            }
            if (!this.windowMask) {
                this.windowMask = $("<div class='l-window-mask' style='display: block;'></div>").appendTo("body");
                $(window).bind("resize.ligeruiwin", e);
                $(window).bind("scroll", e)
            }
            this.windowMask.show();
            e();
            this.masking = !0
        },
        unmask: function (e) {
            for (var t = $("body > .l-dialog:visible,body > .l-window:visible"), i = 0, r = t.length; r > i; i++) {
                var s = t.eq(i).attr("ligeruiid");
                if (!e || e.id != s) {
                    var a = liger.get(s);
                    if (a) {
                        var o = a.get("modal");
                        if (o) return
                    }
                }
            }
            this.windowMask && this.windowMask.hide();
            this.masking = !1
        },
        createTaskbar: function () {
            if (!this.taskbar) {
                this.taskbar = $('<div class="l-taskbar"><div class="l-taskbar-tasks"></div><div class="l-clear"></div></div>').appendTo("body");
                this.top && this.taskbar.addClass("l-taskbar-top");
                this.taskbar.tasks = $(".l-taskbar-tasks:first", this.taskbar);
                this.tasks = {}
            }
            this.taskbar.show();
            this.taskbar.animate({
                bottom: 0
            });
            return this.taskbar
        },
        removeTaskbar: function () {
            var e = this;
            e.taskbar.animate({
                bottom: -32
            }, function () {
                e.taskbar.remove();
                e.taskbar = null
            })
        },
        activeTask: function (e) {
            for (var t in this.tasks) {
                var i = this.tasks[t];
                t == e.id ? i.addClass("l-taskbar-task-active") : i.removeClass("l-taskbar-task-active")
            }
        },
        getTask: function (e) {
            var t = this;
            return t.taskbar ? t.tasks[e.id] ? t.tasks[e.id] : null : void 0
        },
        addTask: function (e) {
            var t = this;
            t.taskbar || t.createTaskbar();
            if (t.tasks[e.id]) return t.tasks[e.id];
            var i = e.get("title"),
                r = t.tasks[e.id] = $('<div class="l-taskbar-task"><div class="l-taskbar-task-icon"></div><div class="l-taskbar-task-content">' + i + "</div></div>");
            t.taskbar.tasks.append(r);
            t.activeTask(e);
            r.bind("click", function () {
                t.activeTask(e);
                e.actived ? e.min() : e.active()
            }).hover(function () {
                $(this).addClass("l-taskbar-task-over")
            }, function () {
                $(this).removeClass("l-taskbar-task-over")
            });
            return r
        },
        hasTask: function () {
            for (var e in this.tasks)
                if (this.tasks[e]) return !0;
            return !1
        },
        removeTask: function (e) {
            var t = this;
            if (t.taskbar) {
                if (t.tasks[e.id]) {
                    t.tasks[e.id].unbind();
                    t.tasks[e.id].remove();
                    delete t.tasks[e.id]
                }
                t.hasTask() || t.removeTaskbar()
            }
        },
        setFront: function (e) {
            var t = liger.find(liger.core.Win);
            for (var i in t) {
                var r = t[i];
                if (r == e) {
                    $(r.element).css("z-index", "9200");
                    this.activeTask(r)
                } else $(r.element).css("z-index", "9100")
            }
        }
    };
    liger.core.Win = function (e, t) {
        liger.core.Win.base.constructor.call(this, e, t)
    };
    liger.core.Win.ligerExtend(liger.core.UIComponent, {
        __getType: function () {
            return "liger.controls.Win"
        },
        mask: function () {
            this.options.modal && liger.win.mask(this)
        },
        unmask: function () {
            this.options.modal && liger.win.unmask(this)
        },
        min: function () {},
        max: function () {},
        active: function () {}
    });
    liger.draggable = {
        dragging: !1
    };
    liger.resizable = {
        reszing: !1
    };
    liger.toJSON = "object" == typeof JSON && JSON.stringify ? JSON.stringify : function (e) {
        var t = function (e) {
                return 10 > e ? "0" + e : e
            },
            i = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            r = function (e) {
                i.lastIndex = 0;
                return i.test(e) ? '"' + e.replace(i, function (e) {
                    var t = meta[e];
                    return "string" == typeof t ? t : "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4)
                }) + '"' : '"' + e + '"'
            };
        if (null === e) return "null";
        var s = typeof e;
        if ("undefined" === s) return void 0;
        if ("string" === s) return r(e);
        if ("number" === s || "boolean" === s) return "" + e;
        if ("object" === s) {
            if ("function" == typeof e.toJSON) return liger.toJSON(e.toJSON());
            if (e.constructor === Date) return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + t(this.getUTCMonth() + 1) + "-" + t(this.getUTCDate()) + "T" + t(this.getUTCHours()) + ":" + t(this.getUTCMinutes()) + ":" + t(this.getUTCSeconds()) + "Z" : null;
            var a = [];
            if (e.constructor === Array) {
                for (var o = 0, n = e.length; n > o; o++) a.push(liger.toJSON(e[o]) || "null");
                return "[" + a.join(",") + "]"
            }
            var l, d;
            for (var p in e) {
                s = typeof p;
                if ("number" === s) l = '"' + p + '"';
                else {
                    if ("string" !== s) continue;
                    l = r(p)
                }
                s = typeof e[p];
                if ("function" !== s && "undefined" !== s) {
                    d = liger.toJSON(e[p]);
                    a.push(l + ":" + d)
                }
            }
            return "{" + a.join(",") + "}"
        }
    }
}(jQuery);
! function (t) {
    t.fn.ligerTab = function () {
        return t.ligerui.run.call(this, "ligerTab", arguments)
    };
    t.fn.ligerGetTabManager = function () {
        return t.ligerui.run.call(this, "ligerGetTabManager", arguments);
    };
    t.ligerDefaults.Tab = {
        height: null,
        heightDiff: 0,
        changeHeightOnResize: !1,
        contextmenu: !0,
        dblClickToClose: !1,
        dragToMove: !0,
        onBeforeOverrideTabItem: null,
        onAfterOverrideTabItem: null,
        onBeforeRemoveTabItem: null,
        onAfterRemoveTabItem: null,
        onBeforeAddTabItem: null,
        onAfterAddTabItem: null,
        onBeforeSelectTabItem: null,
        onAfterSelectTabItem: null,
        onAfterLeaveTabItem: null
    };
    t.ligerDefaults.TabString = {
        closeMessage: "关闭当前页",
        closeOtherMessage: "关闭其他",
        closeAllMessage: "关闭所有",
        reloadMessage: "刷新"
    };
    t.ligerMethos.Tab = {};
    t.ligerui.controls.Tab = function (e, i) {
        t.ligerui.controls.Tab.base.constructor.call(this, e, i)
    };
    t.ligerui.controls.Tab.ligerExtend(t.ligerui.core.UIComponent, {
        __getType: function () {
            return "Tab"
        },
        __idPrev: function () {
            return "Tab"
        },
        _extendMethods: function () {
            return t.ligerMethos.Tab
        },
        _render: function () {
            var e = this,
                i = this.options;
            i.height && (e.makeFullHeight = !0);
            e.tab = t(this.element);
            e.tab.addClass("l-tab");
            i.contextmenu && t.ligerMenu && (e.tab.menu = t.ligerMenu({
                width: 100,
                items: [{
                    text: i.closeMessage,
                    id: "close",
                    click: function () {
                        e._menuItemClick.apply(e, arguments)
                    }
                }, {
                    text: i.closeOtherMessage,
                    id: "closeother",
                    click: function () {
                        e._menuItemClick.apply(e, arguments)
                    }
                }, {
                    text: i.closeAllMessage,
                    id: "closeall",
                    click: function () {
                        e._menuItemClick.apply(e, arguments)
                    }
                }, {
                    text: i.reloadMessage,
                    id: "reload",
                    click: function () {
                        e._menuItemClick.apply(e, arguments)
                    }
                }]
            }));
            e.tab.content = t('<div class="l-tab-content"></div>');
            t("> div", e.tab).appendTo(e.tab.content);
            e.tab.content.appendTo(e.tab);
            e.tab.links = t('<div class="l-tab-links"><ul style="left: 0px; "></ul></div>');
            e.tab.links.prependTo(e.tab);
            e.tab.links.ul = t("ul", e.tab.links);
            var r = t("> div[lselected=true]", e.tab.content),
                a = r.length > 0;
            e.selectedTabId = r.attr("tabid");
            t("> div", e.tab.content).each(function (i) {
                var r = t('<li class=""><a></a><div class="l-tab-links-item-left"></div><div class="l-tab-links-item-right"></div></li>'),
                    s = t(this);
                if (s.attr("title")) {
                    t("> a", r).html(s.attr("title"));
                    s.attr("title", "")
                }
                var o = s.attr("tabid");
                if (void 0 == o) {
                    o = e.getNewTabid();
                    s.attr("tabid", o);
                    s.attr("lselected") && (e.selectedTabId = o)
                }
                r.attr("tabid", o);
                a || 0 != i || (e.selectedTabId = o);
                var n = s.attr("showClose");
                n && r.append("<div class='l-tab-links-item-close'></div>");
                t("> ul", e.tab.links).append(r);
                s.hasClass("l-tab-content-item") || s.addClass("l-tab-content-item");
                if (s.find("iframe").length > 0) {
                    var l = t("iframe:first", s);
                    if ("complete" != l[0].readyState) {
                        0 == s.find(".l-tab-loading:first").length && s.prepend("<div class='l-tab-loading' style='display:block;'></div>");
                        var d = t(".l-tab-loading:first", s);
                        l.bind("load.tab", function () {
                            d.hide()
                        })
                    }
                }
            });
            e.selectTabItem(e.selectedTabId);
            if (i.height)
                if ("string" == typeof i.height && i.height.indexOf("%") > 0) {
                    e.onResize();
                    i.changeHeightOnResize && t(window).resize(function () {
                        e.onResize.call(e)
                    })
                } else e.setHeight(i.height);
            e.makeFullHeight && e.setContentHeight();
            t("li", e.tab.links).each(function () {
                e._addTabItemEvent(t(this))
            });
            e.tab.bind("dblclick.tab", function (r) {
                if (i.dblClickToClose) {
                    e.dblclicking = !0;
                    var a = r.target || r.srcElement,
                        s = a.tagName.toLowerCase();
                    if ("a" == s) {
                        var o = t(a).parent().attr("tabid"),
                            n = t(a).parent().find("div.l-tab-links-item-close").length ? !0 : !1;
                        n && e.removeTabItem(o)
                    }
                    e.dblclicking = !1
                }
            });
            e.set(i)
        },
        _applyDrag: function (e) {
            {
                var i = this;
                this.options
            }
            i.droptip = i.droptip || t("<div class='l-tab-drag-droptip' style='display:none'><div class='l-drop-move-up'></div><div class='l-drop-move-down'></div></div>").appendTo("body");
            var r = t(e).ligerDrag({
                revert: !0,
                animate: !1,
                proxy: function () {
                    var e = t(this).find("a").html();
                    i.dragproxy = t("<div class='l-tab-drag-proxy' style='display:none'><div class='l-drop-icon l-drop-no'></div></div>").appendTo("body");
                    i.dragproxy.append(e);
                    return i.dragproxy
                },
                onRendered: function () {
                    this.set("cursor", "pointer")
                },
                onStartDrag: function (i, r) {
                    if (!t(e).hasClass("l-selected")) return !1;
                    if (2 == r.button) return !1;
                    var a = r.srcElement || r.target;
                    return t(a).hasClass("l-tab-links-item-close") ? !1 : void 0
                },
                onDrag: function (e, r) {
                    null == i.dropIn && (i.dropIn = -1);
                    var a = i.tab.links.ul.find(">li"),
                        s = a.index(e.target);
                    a.each(function (e) {
                        if (s != e) {
                            var a = e > s;
                            if (-1 == i.dropIn || i.dropIn == e) {
                                var o = t(this).offset(),
                                    n = {
                                        top: o.top,
                                        bottom: o.top + t(this).height(),
                                        left: o.left - 10,
                                        right: o.left + 10
                                    };
                                if (a) {
                                    n.left += t(this).width();
                                    n.right += t(this).width()
                                }
                                var l = r.pageX || r.screenX,
                                    d = r.pageY || r.screenY;
                                if (l > n.left && l < n.right && d > n.top && d < n.bottom) {
                                    i.droptip.css({
                                        left: n.left + 5,
                                        top: n.top - 9
                                    }).show();
                                    i.dropIn = e;
                                    i.dragproxy.find(".l-drop-icon").removeClass("l-drop-no").addClass("l-drop-yes")
                                } else {
                                    i.dropIn = -1;
                                    i.droptip.hide();
                                    i.dragproxy.find(".l-drop-icon").removeClass("l-drop-yes").addClass("l-drop-no")
                                }
                            }
                        }
                    })
                },
                onStopDrag: function (e) {
                    if (i.dropIn > -1) {
                        var r = i.tab.links.ul.find(">li:eq(" + i.dropIn + ")").attr("tabid"),
                            a = t(e.target).attr("tabid");
                        setTimeout(function () {
                            i.moveTabItem(a, r)
                        }, 0);
                        i.dropIn = -1;
                        i.dragproxy.remove()
                    }
                    i.droptip.hide();
                    this.set("cursor", "default")
                }
            });
            return r
        },
        _setDragToMove: function (e) {
            if (t.fn.ligerDrag) {
                {
                    var i = this;
                    this.options
                }
                if (e) {
                    if (i.drags) return;
                    i.drags = i.drags || [];
                    i.tab.links.ul.find(">li").each(function () {
                        i.drags.push(i._applyDrag(this))
                    })
                }
            }
        },
        moveTabItem: function (t, e) {
            var i = this,
                r = i.tab.links.ul.find(">li[tabid=" + t + "]"),
                a = i.tab.links.ul.find(">li[tabid=" + e + "]"),
                s = i.tab.links.ul.find(">li").index(r),
                o = i.tab.links.ul.find(">li").index(a);
            o > s ? a.after(r) : a.before(r)
        },
        setTabManageEven: function () {
            {
                var e = this;
                this.options
            }
            t("#tabManage").click(function () {
                var i = t(this).position();
                if (0 === t(".l-tab-menu").length) {
                    var r = '<div class="l-tab-menu"><p id="tabCloseAll" data-opt="closeall"><b></b>关闭全部</p><p id="tabCloseCur" data-opt="closecur"><b></b>关闭当前页</p><p id="tabRefCur" data-opt="reloadcur"><b></b>刷新当前页</p>';
                    t("#page-tab").append(r);
                    t(".l-tab-menu").css({
                        top: i.top + 30 + "px",
                        left: i.left + 18 - t(".l-tab-menu").outerWidth() + t("#tabManage").outerWidth() + "px"
                    });
                    t(".l-tab-menu p").each(function () {
                        t(this).click(function () {
                            e._menuItemClick({
                                id: t(this).data("opt")
                            });
                            t(".l-tab-menu").hide()
                        })
                    })
                } else t(".l-tab-menu").css({
                    top: i.top + 30 + "px",
                    left: i.left + 18 - t(".l-tab-menu").outerWidth() + t("#tabManage").outerWidth() + "px"
                }).show()
            });
            t(document).click(function (e) {
                t(e.target).isChildAndSelfOf(".l-tab-menu") || t(e.target).isChildAndSelfOf("#tabManage") || t(".l-tab-menu").hide()
            })
        },
        setTabButton: function () {
            var e = this,
                i = (this.options, 0);
            t("li", e.tab.links.ul).each(function () {
                i += t(this).width() + 2
            });
            var r = e.tab.width();
            if (i > r) {
                e.tab.links.append('<div class="l-tab-links-left"><i></i></div><div class="l-tab-links-right"><i></i></div>');
                e.setTabButtonEven();
                return !0
            }
            e.tab.links.ul.animate({
                left: 0
            });
            t(".l-tab-links-left,.l-tab-links-right", e.tab.links).remove();
            return !1
        },
        setTabButtonEven: function () {
            {
                var e = this;
                this.options
            }
            t(".l-tab-links-left", e.tab.links).hover(function () {
                t(this).addClass("l-tab-links-left-over")
            }, function () {
                t(this).removeClass("l-tab-links-left-over")
            }).click(function () {
                e.moveToPrevTabItem()
            });
            t(".l-tab-links-right", e.tab.links).hover(function () {
                t(this).addClass("l-tab-links-right-over")
            }, function () {
                t(this).removeClass("l-tab-links-right-over")
            }).click(function () {
                e.moveToNextTabItem()
            })
        },
        moveToPrevTabItem: function () {
            var e = this,
                i = (this.options, t(".l-tab-links-left", e.tab.links).width()),
                r = new Array;
            t("li", e.tab.links).each(function (e) {
                var a = -1 * i;
                e > 0 && (a = parseInt(r[e - 1]) + t(this).prev().width() + 2);
                r.push(a)
            });
            for (var a = -1 * parseInt(e.tab.links.ul.css("left")), s = 0; s < r.length - 1; s++)
                if (r[s] < a && r[s + 1] >= a) {
                    e.tab.links.ul.animate({
                        left: -1 * parseInt(r[s])
                    });
                    return
                }
        },
        moveToNextTabItem: function () {
            var e = this,
                i = (this.options, t(".l-tab-links-right", e.tab).width()),
                r = 0,
                a = t("li", e.tab.links.ul);
            a.each(function () {
                r += t(this).width() + 2
            });
            for (var s = e.tab.width(), o = new Array, n = a.length - 1; n >= 0; n--) {
                var l = r - s + i + 2;
                n != a.length - 1 && (l = parseInt(o[a.length - 2 - n]) - t(a[n + 1]).width() - 2);
                o.push(l)
            }
            for (var d = -1 * parseInt(e.tab.links.ul.css("left")), c = 1; c < o.length; c++)
                if (o[c] <= d && o[c - 1] > d) {
                    e.tab.links.ul.animate({
                        left: -1 * parseInt(o[c - 1])
                    });
                    return
                }
        },
        getTabItemCount: function () {
            {
                var e = this;
                this.options
            }
            return t("li", e.tab.links.ul).length
        },
        getSelectedTabItemID: function () {
            {
                var e = this;
                this.options
            }
            return t("li.l-selected", e.tab.links.ul).attr("tabid")
        },
        removeSelectedTabItem: function () {
            {
                var t = this;
                this.options
            }
            t.removeTabItem(t.getSelectedTabItemID())
        },
        overrideSelectedTabItem: function (t) {
            {
                var e = this;
                this.options
            }
            e.overrideTabItem(e.getSelectedTabItemID(), t)
        },
        overrideTabItem: function (e, i) {
            {
                var r = this;
                this.options
            }
            if (0 == r.trigger("beforeOverrideTabItem", [e])) return !1;
            var a = i.tabid;
            void 0 == a && (a = r.getNewTabid());
            var s = i.url,
                o = i.content,
                n = (i.target, i.text),
                l = i.showClose,
                d = i.height,
                c = t("li[tabid=" + e + "]", r.tab.links.ul),
                p = t(".l-tab-content-item[tabid=" + e + "]", r.tab.content),
                u = t("div:first", p).show();
            if (c && p) {
                c.attr("tabid", a);
                p.attr("tabid", a);
                0 == t("iframe", p).length && s ? p.html("<iframe frameborder='0'></iframe>") : o && p.html(o);
                t("iframe", p).attr("name", a);
                void 0 == l && (l = !0);
                0 == l ? t(".l-tab-links-item-close", c).remove() : 0 == t(".l-tab-links-item-close", c).length && c.append("<div class='l-tab-links-item-close'></div>");
                void 0 == n && (n = a);
                d && p.height(d);
                t("a", c).text(n);
                t("iframe", p).attr("src", s).bind("load.tab", function () {
                    u.hide();
                    i.callback && i.callback()
                });
                r.trigger("afterOverrideTabItem", [e])
            }
        },
        setHeader: function (e, i) {
            t("li[tabid=" + e + "] a", this.tab.links.ul).text(i)
        },
        selectTabItem: function (e) {
            {
                var i = this;
                this.options
            }
            if (0 == i.trigger("beforeSelectTabItem", [e])) return !1;
            i.trigger("afterLeaveTabItem", [i.selectedTabId]);
            i.selectedTabId = e;
            t("> .l-tab-content-item[tabid=" + e + "]", i.tab.content).show().siblings().hide();
            t("li[tabid=" + e + "]", i.tab.links.ul).addClass("l-selected").siblings().removeClass("l-selected");
            i.trigger("afterSelectTabItem", [e])
        },
        moveToLastTabItem: function () {
            var e = this,
                i = (this.options, 0);
            t("li", e.tab.links.ul).each(function () {
                i += t(this).width() + 2
            });
            var r = e.tab.width();
            if (i > r) {
                var a = t(".l-tab-links-right", e.tab.links).width();
                e.tab.links.ul.animate({
                    left: -1 * (i - r + a + 2)
                })
            }
        },
        isTabItemExist: function (e) {
            {
                var i = this;
                this.options
            }
            return t("li[tabid=" + e + "]", i.tab.links.ul).length > 0
        },
        addTabItem: function (e) {
            var i = this,
                r = this.options;
            if (0 == i.trigger("beforeAddTabItem", [a])) return !1;
            var a = e.tabid;
            void 0 == a && (a = i.getNewTabid());
            var s = e.url,
                o = e.content,
                n = e.text,
                l = e.showClose,
                d = e.height;
            if (i.isTabItemExist(a)) {
                var c = t(".l-tab-content-item[tabid=" + a + "]").find("iframe").attr("src");
                i.selectTabItem(a);
                if (c != s) {
                    i.overrideTabItem(a, e);
                    return
                }
            } else {
                var p = t("<li><a></a><div class='l-tab-links-item-left'></div><div class='l-tab-links-item-right'></div><div class='l-tab-links-item-close'></div></li>"),
                    u = t("<div class='l-tab-content-item'><div class='l-tab-loading' style='display:block;'></div><iframe frameborder='0'></iframe></div>"),
                    h = t("div:first", u),
                    f = t("iframe:first", u);
                if (i.makeFullHeight) {
                    var g = i.tab.height() - i.tab.links.height();
                    u.height(g)
                }
                p.attr("tabid", a);
                u.attr("tabid", a);
                if (s) f.attr("name", a).attr("id", a).attr("src", s).bind("load.tab", function () {
                    h.hide();
                    e.callback && e.callback()
                });
                else {
                    f.remove();
                    h.remove()
                }
                o ? u.html(o) : e.target && u.append(e.target);
                void 0 == l && (l = !0);
                0 == l && t(".l-tab-links-item-close", p).remove();
                void 0 == n && (n = a);
                d && u.height(d);
                t("a", p).text(n);
                if (0 === t("#tabManage").length) {
                    i.tab.links.ul.append(p);
                    i.tab.links.ul.append('<li id="tabManage"><i></i></li>');
                    i.setTabManageEven()
                } else p.insertBefore("#tabManage");
                i.tab.content.append(u);
                i.selectTabItem(a);
                i.setTabButton() && i.moveToLastTabItem();
                i._addTabItemEvent(p);
                if (r.dragToMove && t.fn.ligerDrag) {
                    i.drags = i.drags || [];
                    p.each(function () {
                        i.drags.push(i._applyDrag(this))
                    })
                }
                i.trigger("afterAddTabItem", [a])
            }
        },
        _addTabItemEvent: function (e) {
            {
                var i = this;
                this.options
            }
            e.click(function () {
                var e = t(this).attr("tabid");
                i.selectTabItem(e)
            });
            i.tab.menu && i._addTabItemContextMenuEven(e);
            t(".l-tab-links-item-close", e).hover(function () {
                t(this).addClass("l-tab-links-item-close-over")
            }, function () {
                t(this).removeClass("l-tab-links-item-close-over")
            }).click(function () {
                var e = t(this).parent().attr("tabid");
                i.removeTabItem(e)
            })
        },
        removeTabItem: function (e) {
            {
                var i = this;
                this.options
            }
            if (0 == i.trigger("beforeRemoveTabItem", [e])) return !1;
            var r = t("li[tabid=" + e + "]", i.tab.links.ul).hasClass("l-selected");
            if (r) {
                var a = t(".l-tab-content-item[tabid=" + e + "]", i.tab.content).prev().attr("tabid");
                i.selectTabItem(a)
            }
            var s = t(".l-tab-content-item[tabid=" + e + "]", i.tab.content),
                o = t("iframe", s);
            if (o.length) {
                var n = o[0];
                n.src = "about:blank";
                try {
                    n.contentWindow.document.write("")
                } catch (l) {}
                "Microsoft Internet Explorer" === navigator.appName && CollectGarbage();
                o.remove()
            }
            s.remove();
            t("li[tabid=" + e + "]", i.tab.links.ul).remove();
            i.setTabButton();
            i.trigger("afterRemoveTabItem", [e])
        },
        addHeight: function (t) {
            var e = this,
                i = (this.options, e.tab.height() + t);
            e.setHeight(i)
        },
        setHeight: function (t) {
            {
                var e = this;
                this.options
            }
            e.tab.height(t);
            e.setContentHeight()
        },
        setContentHeight: function () {
            var e = this,
                i = (this.options, e.tab.height() - e.tab.links.height());
            e.tab.content.height(i);
            t("> .l-tab-content-item", e.tab.content).height(i)
        },
        getNewTabid: function () {
            {
                var t = this;
                this.options
            }
            t.getnewidcount = t.getnewidcount || 0;
            return "tabitem" + ++t.getnewidcount
        },
        getTabidList: function (e, i) {
            var r = this,
                a = (this.options, []);
            t("> li", r.tab.links.ul).each(function () {
                t(this).attr("tabid") && t(this).attr("tabid") != e && (!i || t(".l-tab-links-item-close", this).length > 0) && a.push(t(this).attr("tabid"))
            });
            return a
        },
        removeOther: function (e) {
            var i = this,
                r = (this.options, i.getTabidList(e, !0));
            t(r).each(function () {
                i.removeTabItem(this)
            })
        },
        reload: function (e) {
            var i = (this.options, t(".l-tab-content-item[tabid=" + e + "]")),
                r = t(".l-tab-loading:first", i),
                a = t("iframe:first", i),
                s = t(a).attr("src");
            r.show();
            a.attr("src", s).unbind("load.tab").bind("load.tab", function () {
                r.hide()
            })
        },
        removeAll: function () {
            var e = this,
                i = (this.options, e.getTabidList(null, !0));
            t(i).each(function () {
                e.removeTabItem(this)
            })
        },
        onResize: function () {
            var e = this,
                i = this.options;
            if (!i.height || "string" != typeof i.height || -1 == i.height.indexOf("%")) return !1;
            if ("body" == e.tab.parent()[0].tagName.toLowerCase()) {
                var r = t(window).height();
                r -= parseInt(e.tab.parent().css("paddingTop"));
                r -= parseInt(e.tab.parent().css("paddingBottom"));
                e.height = i.heightDiff + r * parseFloat(e.height) * .01
            } else e.height = i.heightDiff + e.tab.parent().height() * parseFloat(i.height) * .01;
            e.tab.height(e.height);
            e.setContentHeight()
        },
        _menuItemClick: function (e) {
            {
                var i = this;
                this.options
            }
            i.actionTabid = i.actionTabid || i.getSelectedTabItemID();
            if (e.id && i.actionTabid) switch (e.id) {
            case "close":
                i.removeTabItem(i.actionTabid);
                i.actionTabid = null;
                break;
            case "closecur":
                if ("index" === i.getSelectedTabItemID()) break;
                i.removeTabItem(i.getSelectedTabItemID());
                break;
            case "closeother":
                i.removeOther(i.actionTabid);
                break;
            case "closeall":
                i.removeAll();
                i.actionTabid = null;
                break;
            case "reload":
                i.selectTabItem(i.actionTabid);
                i.reload(i.actionTabid);
                break;
            case "reloadcur":
                i.reload(i.getSelectedTabItemID());
                break;
            case "reloadall":
                var r = i.getTabidList(null, !1);
                t(r).each(function () {
                    i.reload(this)
                })
            }
        },
        _addTabItemContextMenuEven: function (e) {
            {
                var i = this;
                this.options
            }
            e.bind("contextmenu", function (r) {
                if (i.tab.menu) {
                    i.actionTabid = e.attr("tabid");
                    i.tab.menu.show({
                        top: r.pageY,
                        left: r.pageX
                    });
                    0 == t(".l-tab-links-item-close", this).length ? i.tab.menu.setDisabled("close") : i.tab.menu.setEnabled("close");
                    return !1
                }
            })
        }
    })
}(jQuery);